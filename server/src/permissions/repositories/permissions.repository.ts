import { db } from "@/db";
import * as schema from "@/db/schema";
import { NewUserPermission, UserPermission } from "@/db/schema"; // Import types
import { and, eq, inArray } from "drizzle-orm";
import { CustomPermissionsDto } from "../dto/permissions.dto"; // Reusing DTO type for partial updates

export class PermissionsRepository {
  /**
   * Find permissions granted to a specific user.
   */
  async findByUserId(userId: string): Promise<UserPermission[]> {
    return db.query.userPermissions.findMany({
      where: eq(schema.userPermissions.userId, userId),
      with: {
        property: { columns: { name: true } },
        grantedByUser: {
          columns: { name: true },
          relationName: "permissionGrantor",
        },
      },
    });
  }

  /**
   * Find permissions granted for a specific property.
   */
  async findByPropertyId(propertyId: string): Promise<UserPermission[]> {
    return db.query.userPermissions.findMany({
      where: eq(schema.userPermissions.propertyId, propertyId),
      with: {
        user: { columns: { id: true, name: true, email: true, role: true } },
        grantedByUser: {
          columns: { name: true },
          relationName: "permissionGrantor",
        },
      },
    });
  }

  /**
   * Find a specific permission entry by user and property ID.
   */
  async findOne(
    userId: string,
    propertyId: string
  ): Promise<UserPermission | undefined> {
    return db.query.userPermissions.findFirst({
      where: and(
        eq(schema.userPermissions.userId, userId),
        eq(schema.userPermissions.propertyId, propertyId)
      ),
    });
  }

  /**
   * Create a new permission entry.
   */
  async create(data: NewUserPermission): Promise<UserPermission> {
    const [newPermission] = await db
      .insert(schema.userPermissions)
      .values({
        ...data,
        // ID is generated by default function in schema, no need to pass it here
        // createdAt/updatedAt also have defaults
      })
      .returning();
    return newPermission;
  }

  /**
   * Update an existing permission entry.
   */
  async update(
    id: string,
    data: Partial<
      Omit<
        NewUserPermission,
        "id" | "userId" | "propertyId" | "grantedBy" | "createdAt"
      >
    > & { role: string } & CustomPermissionsDto
  ): Promise<UserPermission> {
    const [updatedPermission] = await db
      .update(schema.userPermissions)
      .set({
        ...data,
        updatedAt: new Date(),
      })
      .where(eq(schema.userPermissions.id, id))
      .returning();
    return updatedPermission;
  }

  /**
   * Delete a permission entry by user and property ID.
   */
  async delete(userId: string, propertyId: string): Promise<{ count: number }> {
    const result = await db
      .delete(schema.userPermissions)
      .where(
        and(
          eq(schema.userPermissions.userId, userId),
          eq(schema.userPermissions.propertyId, propertyId)
        )
      );
    return { count: result.rowCount ?? 0 }; // Return rowCount or 0 if null
  }

  /**
   * Find users suitable for assignment (e.g., Caretakers, Agents).
   */
  async findAssignableUsers(): Promise<
    Array<{ id: string; name: string; email: string; role: string }>
  > {
    return db.query.users.findMany({
      where: inArray(schema.users.role, ["CARETAKER", "AGENT"]),
      columns: {
        id: true,
        name: true,
        email: true,
        role: true,
      },
      orderBy: [schema.users.name],
    });
  }

  /**
   * Find properties owned by a user.
   */
  async findOwnedProperties(
    ownerId: string
  ): Promise<
    Array<{ id: string; name: string; createdAt: Date; updatedAt: Date }>
  > {
    return db.query.properties.findMany({
      where: eq(schema.properties.ownerId, ownerId),
      columns: { id: true, name: true, createdAt: true, updatedAt: true }, // Only fetch needed columns
    });
  }

  /**
   * Find a specific user by ID.
   */
  async findUserById(
    userId: string
  ): Promise<{ id: string; role: string } | undefined> {
    return db.query.users.findFirst({
      where: eq(schema.users.id, userId),
      columns: { id: true, role: true },
    });
  }
}

// Export a singleton instance
export const permissionsRepository = new PermissionsRepository();
